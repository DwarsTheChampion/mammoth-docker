x-mammoth: &mammoth
    build: &mammoth_build
        context: .
        dockerfile: docker/mammoth.Dockerfile
    env_file: '.env'
    command: npm run start
    depends_on:
        migrations:
            condition: service_completed_successfully

x-world: &world
    <<: *mammoth
    build:
        <<: *mammoth_build
        args:
            PACKAGE: 'world'
    volumes:
        - ${DATA_VOLUME_DIR}:/app/data

services:
    nginx:
        container_name: mammoth-nginx
        image: nginx:1.27-alpine
        volumes:
            - ${ASSETS_VOLUME_DIR}:/usr/share/nginx/html
            - ./config/nginx.conf.template:/etc/nginx/templates/default.conf.template
        environment:
            API_PORT: ${API_PORT}
            NGINX_PORT: ${NGINX_PORT}
        ports:
            - "${NGINX_PORT}:${NGINX_PORT}"
        depends_on:
            - api

    mariadb:
        container_name: mammoth-mariadb
        image: mariadb:11.4
        volumes:
            - mammoth-mariadb-data:/var/lib/mysql
        environment:
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
        healthcheck:
            test: sh -c "healthcheck.sh --connect --innodb_initialized"
            interval: 3s
            retries: 30

    redis:
        container_name: mammoth-redis
        image: redis:7.4-alpine
        command: redis-server --requirepass ${REDIS_PASSWORD}

    migrations:
        container_name: mammoth-migrations
        build:
            context: .
            dockerfile: docker/migrations.Dockerfile
        environment:
            DATABASE_URL: ${DATABASE_URL}
        command: prisma migrate deploy
        depends_on:
            mariadb:
                condition: service_healthy

    websockify:
        container_name: mammoth-websockify
        build:
            context: .
            dockerfile: docker/websockify.Dockerfile
        volumes:
            - ./scripts/websockify.sh:/app/websockify.sh
        env_file: .env
        command: sh -c "./websockify.sh"
        ports:
            - "${WS_JOIN_PORT}:${WS_JOIN_PORT}"
            - "${WS_BLIZZARD_PORT}:${WS_BLIZZARD_PORT}"

    api:
        <<: *mammoth
        container_name: mammoth-api
        build:
            <<: *mammoth_build
            args:
                PACKAGE: 'api'

    join:
        <<: *mammoth
        container_name: mammoth-join
        build:
            <<: *mammoth_build
            args:
                PACKAGE: 'join'
        ports:
            - "${JOIN_PORT}:${JOIN_PORT}"

    policy:
        <<: *mammoth
        container_name: mammoth-policy
        build:
            <<: *mammoth_build
            args:
                PACKAGE: 'policy'
        ports:
            - "${POLICY_PORT}:${POLICY_PORT}"

    blizzard:
        <<: *world
        container_name: mammoth-blizzard
        command: npm run start -- -i 100 -n Blizzard -p ${BLIZZARD_PORT}
        ports:
            - "${BLIZZARD_PORT}:${BLIZZARD_PORT}"

volumes:
    mammoth-mariadb-data:
