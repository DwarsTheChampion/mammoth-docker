x-vanilla: &vanilla
    build:
        context: .
        dockerfile: docker/vanilla.Dockerfile
    env_file: .env
    depends_on:
        migrations:
            condition: service_completed_successfully

x-api: &api
    build:
        context: .
        dockerfile: docker/api.Dockerfile
    env_file: .env
    depends_on:
        migrations:
            condition: service_completed_successfully

services:
    nginx:
        container_name: vanilla-nginx
        image: nginx:1.27-alpine
        volumes:
            - ./assets:/usr/share/nginx/html
            - ./config/nginx.conf.template:/etc/nginx/templates/default.conf.template
        environment:
            API_PORT: ${API_PORT}
        ports:
            - "${NGINX_PORT}:80"
        depends_on:
            - api

    mariadb:
        container_name: vanilla-mariadb
        image: mariadb:11.4
        volumes:
            - vanilla-mariadb-data:/var/lib/mysql
        environment:
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
        healthcheck:
            test: sh -c "healthcheck.sh --connect --innodb_initialized"
            interval: 3s
            retries: 30

    migrations:
        container_name: vanilla-migrations
        build:
            context: .
            dockerfile: docker/migrations.Dockerfile
        environment:
            DATABASE_URL: ${DATABASE_URL}
        command: prisma migrate deploy
        depends_on:
            mariadb:
                condition: service_healthy

    websockify:
        container_name: vanilla-websockify
        build:
            context: .
            dockerfile: docker/websockify.Dockerfile
        volumes:
            - ./scripts/websockify.sh:/app/websockify.sh
        env_file: .env
        command: sh -c "./websockify.sh"
        ports:
            - "${WS_JOIN_PORT}:${WS_JOIN_PORT}"
            - "${WS_BLIZZARD_PORT}:${WS_BLIZZARD_PORT}"

    api:
        <<: *api
        container_name: vanilla-api
        command: npm run start:api

    join:
        <<: *api
        container_name: vanilla-join
        command: node dist/join/Join.js
        ports:
            - "${JOIN_PORT}:${JOIN_PORT}"

    blizzard:
        <<: *vanilla
        container_name: vanilla-blizzard
        command: npm run start -- -n Blizzard -p ${BLIZZARD_PORT}
        ports:
            - "${BLIZZARD_PORT}:${BLIZZARD_PORT}"

volumes:
    vanilla-mariadb-data:
